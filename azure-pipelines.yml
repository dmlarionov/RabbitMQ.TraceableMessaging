# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/*
    - README.md

name: '1.0.$(Rev:r)'

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet build -c $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '-c $(buildConfiguration)'

# - task: Docker@1
#   displayName: Login to Docker Hub
#   inputs:
#     command: login
#     containerregistrytype: 'Container Registry'
#     dockerRegistryEndpoint: 'DockerHub'

# - task: Docker@1
#   displayName: Pull RabbitMQ from Docker Hub
#   inputs:
#     command: pull
#     arguments: 'rabbitmq'
#     containerregistrytype: 'Container Registry'
#     dockerRegistryEndpoint: 'DockerHub'

# DockerCompose@0 doesn pull image if needed
- task: DockerCompose@0
  displayName: Start RabbitMQ
  inputs:
    action: 'Run services'
    dockerComposeFile: docker-compose.yml
    projectName: $(Build.Repository.Name)
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'DockerHub'
    #dockerComposeCommand: up

- task: DotNetCoreCLI@2
  displayName: 'dotnet test -c $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '-c $(buildConfiguration)'

- task: DockerCompose@0
  displayName: Stop RabbitMQ
  condition: always()
  inputs:
    action: Run a Docker Compose command
    dockerComposeFile: docker-compose.yml
    projectName: $(Build.Repository.Name)
    containerregistrytype: 'Container Registry'
    dockerRegistryEndpoint: 'DockerHub'
    dockerComposeCommand: down

# - task: Docker@1
#   displayName: Logout from Docker Hub
#   condition: always()
#   inputs:
#     command: logout
#     containerregistrytype: 'Container Registry'
#     dockerRegistryEndpoint: 'DockerHub'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack -c $(buildConfiguration) --no-build'
  inputs:
    command: 'pack'
    configurationToPack: '$(buildConfiguration)'
    packagesToPack: 'src/**/*.csproj' # Required with pack command
    packDirectory: '$(build.artifactStagingDirectory)'
    nobuild: true # Already built on previous step
    versioningScheme: 'byBuildNumber'
    verbosityPack: 'normal'